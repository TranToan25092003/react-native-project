const { Server } = require("socket.io");

function initSocket(server) {
    const io = new Server(server, {
        cors: {
            origin: "*",
        },
    });

    const userRooms = {}; // L∆∞u roomId c·ªßa user ƒë·ªÉ qu·∫£n l√Ω
    const activeChats = new Set(); // L∆∞u danh s√°ch userId c√≥ chat
    const messageHistory = {}; // L∆∞u l·ªãch s·ª≠ tin nh·∫Øn theo userId
    const userStatus = {}; // L∆∞u tr·∫°ng th√°i online c·ªßa ng∆∞·ªùi d√πng
    const unreadCounts = {}; // L∆∞u s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
    const userLastMessages = {}; // L∆∞u tin nh·∫Øn cu·ªëi c√πng c·ªßa m·ªói ng∆∞·ªùi d√πng

    io.on("connection", (socket) => {
        console.log(`üîµ User connected: ${socket.id}`);

        // Khi user join chat v·ªõi admin
        socket.on("join_chat", (userId) => {
            const roomId = `user_${userId}`;
            socket.join(roomId);
            userRooms[socket.id] = roomId;
            activeChats.add(userId);
            userStatus[userId] = true; // ƒê√°nh d·∫•u user online
            
            // Th√¥ng b√°o cho admin bi·∫øt user ƒë√£ online
            io.emit("user_status_update", { userId, online: true });
            
            console.log(`üë§ User ${userId} joined room: ${roomId}`);
        });

        // Khi admin join chat v·ªõi user
        socket.on("admin_join_chat", (userId) => {
            const roomId = `user_${userId}`;
            socket.join(roomId);
            console.log(`üõ†Ô∏è Admin joined room: ${roomId}`);
        });

        // Nh·∫≠n tin nh·∫Øn t·ª´ user ho·∫∑c admin
        socket.on("send_message", ({ userId, sender, message }) => {
            const roomId = `user_${userId}`;
            const timestamp = new Date().toISOString();
            const messageData = { sender, message, timestamp, read: false };
            
            // L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠
            if (!messageHistory[userId]) {
                messageHistory[userId] = [];
            }
            messageHistory[userId].push(messageData);
            
            // C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng
            userLastMessages[userId] = message;
            
            // TƒÉng s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc n·∫øu ng∆∞·ªùi g·ª≠i l√† user v√† kh√¥ng ph·∫£i admin
            if (sender.role === 'USER') {
                unreadCounts[userId] = (unreadCounts[userId] || 0) + 1;
            }
            
            io.to(roomId).emit("receive_message", messageData);
            console.log(`üí¨ Message in ${roomId}: ${message}`);
        });

        // L·∫•y danh s√°ch ng∆∞·ªùi d√πng c√≥ chat
        socket.on("get_users_with_chats", () => {
            const chatUsers = Array.from(activeChats).map(userId => ({
                id: userId,
                online: userStatus[userId] || false,
                unreadCount: unreadCounts[userId] || 0,
                lastMessage: userLastMessages[userId] || ''
            }));
            
            socket.emit("users_with_chats", chatUsers);
            console.log(`üìã Sent users with chats list: ${chatUsers.length} users`);
        });

        // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
        socket.on("mark_messages_read", ({ userId }) => {
            if (messageHistory[userId]) {
                messageHistory[userId].forEach(msg => {
                    if (msg.sender.role === 'USER') {
                        msg.read = true;
                    }
                });
                unreadCounts[userId] = 0;
                console.log(`üìò Marked messages as read for user ${userId}`);
            }
        });

        // L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
        socket.on("get_conversation", ({ userId }) => {
            const conversation = messageHistory[userId] || [];
            socket.emit("conversation_history", conversation);
            console.log(`üìú Sent conversation history for user ${userId}: ${conversation.length} messages`);
        });

        // Khi user ho·∫∑c admin disconnect
        socket.on("disconnect", () => {
            console.log(`üî¥ User disconnected: ${socket.id}`);
            const roomId = userRooms[socket.id];
            
            // N·∫øu l√† user disconnect, x√≥a kh·ªèi danh s√°ch active
            if (roomId) {
                const userId = roomId.replace('user_', '');
                
                // Ki·ªÉm tra xem c√≤n client n√†o trong room kh√¥ng
                const room = io.sockets.adapter.rooms.get(roomId);
                if (!room || room.size === 0) {
                    // Kh√¥ng x√≥a kh·ªèi activeChats ƒë·ªÉ duy tr√¨ l·ªãch s·ª≠ chat
                    // activeChats.delete(userId);
                    
                    // ƒê√°nh d·∫•u user offline
                    userStatus[userId] = false;
                    
                    // Th√¥ng b√°o cho admin bi·∫øt user ƒë√£ offline
                    io.emit("user_status_update", { userId, online: false });
                    
                    console.log(`üëã User ${userId} is now offline`);
                }
            }
            
            delete userRooms[socket.id];
        });
    });

    return io;
}

module.exports = initSocket;
